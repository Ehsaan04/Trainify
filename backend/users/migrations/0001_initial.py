# Generated by Django 5.1.4 on 2025-07-02 20:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_trainer', models.BooleanField(default=False)),
                ('is_client', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='other', max_length=10)),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/clients/')),
                ('goal', models.CharField(choices=[('lose_weight', 'Lose Weight'), ('gain_muscle', 'Gain Weight'), ('maintain_weight', 'Maintain Current Weight')], default='maintain_weight', max_length=20)),
                ('priority_muscles', models.JSONField(blank=True, default=list)),
                ('dietary_preference', models.CharField(choices=[('any', 'No Preference'), ('vegetarian', 'Vegetarian'), ('vegan', 'Vegan'), ('pescatarian', 'Pescatarian'), ('ketogenic', 'Ketogenic'), ('paleo', 'Paleo'), ('gluten_free', 'Gluten-Free'), ('dairy_free', 'Dairy-Free'), ('low_carb', 'Low-Carb')], default='any', max_length=20)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (Little to no exercise)'), ('lightly_active', 'Lightly Active (Light exercise 1-3 days per week)'), ('moderately_active', 'Moderately Active (Moderate exercise 3-5 days per week)'), ('very_active', 'Very Active (Hard exercise 6-7 days per week)'), ('super_active', 'Super Active (Very intense exercise daily)')], default='moderately_active', max_length=20)),
                ('protein_multiplier', models.FloatField(default=1.8, help_text='Grams of protein per kg of bodyweight (1.3 - 2.5)', validators=[django.core.validators.MinValueValidator(1.3), django.core.validators.MaxValueValidator(2.5)])),
                ('daily_calories', models.IntegerField(blank=True, null=True)),
                ('daily_carbs', models.FloatField(blank=True, null=True)),
                ('daily_protein', models.FloatField(blank=True, null=True)),
                ('daily_fat', models.FloatField(blank=True, null=True)),
                ('daily_fiber', models.FloatField(blank=True, null=True)),
                ('macronutrient_last_updated', models.DateTimeField(blank=True, null=True)),
                ('trainer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('meal_number', models.IntegerField()),
                ('food_name', models.CharField(max_length=255)),
                ('weight_in_grams', models.FloatField()),
                ('calories', models.FloatField()),
                ('protein', models.FloatField()),
                ('carbs', models.FloatField()),
                ('fats', models.FloatField()),
                ('fiber', models.FloatField(default=0.0)),
                ('servings', models.FloatField(default=1.0)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to='users.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='MealPlanNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plan_note', to='users.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='TrainerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/trainers/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('first_place_reward', models.CharField(max_length=255)),
                ('second_place_reward', models.CharField(max_length=255)),
                ('third_place_reward', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='users.trainerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='PTRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests_sent', to='users.clientprofile')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests_received', to='users.trainerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the appointment', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description', null=True)),
                ('start', models.DateTimeField(help_text='Start date and time of the appointment')),
                ('end', models.DateTimeField(help_text='End date and time of the appointment')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='users.clientprofile')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments_as_trainer', to='users.trainerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WeightProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Date of recorded weight')),
                ('weight', models.FloatField(help_text='Weight in kg')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weight_progress', to='users.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_frequency', models.PositiveIntegerField(help_text='Number of workout days per week')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plans', to='users.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlanDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_number', models.PositiveIntegerField(help_text='Day number in the workout plan (e.g., Day 1, Day 2)')),
                ('exercises', models.JSONField(help_text='List of exercises for the day')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='users.workoutplan')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlanNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plan_note', to='users.clientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlanRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Rating from 1 to 5')),
                ('workout_name', models.CharField(default='', help_text='Custom name for the workout', max_length=255)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_ratings', to='users.clientprofile')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='users.workoutplan')),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField(default=0, help_text='Total points for the client')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='users.clientprofile')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='users.season')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to='users.trainerprofile')),
            ],
            options={
                'unique_together': {('client', 'trainer', 'season')},
            },
        ),
        migrations.CreateModel(
            name='SavedWorkout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_workouts', to='users.clientprofile')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.workoutplan')),
            ],
            options={
                'unique_together': {('client', 'workout_plan')},
            },
        ),
    ]
